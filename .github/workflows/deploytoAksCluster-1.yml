on:
  push:
    branches:
      - main
    paths:
      - app/**

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: epmacr9918
  CLUSTER_NAME: aks01
  CLUSTER_RESOURCE_GROUP: flxiangdiplom
  NAMESPACE: nhltop
  SECRET: secret-name
  APP_NAME: nhltop
  
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
     - name: Checkout repository 
     - uses: actions/checkout@v2
       with:
        fetch-depth: 0  # For SonarCloud - fetch full repo

     - name: Tests - setup Python 3.9
     - uses: actions/setup-python@v1
       with:
        python-version: 3.9

     - name: Tests - install dependencies
       run: |
        sudo apt-get update
        sudo apt-get -y install libmariadb3 libmariadb-dev
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
     - name: Tests - run
       run: pytest -vv app
  
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
    # Connect to Azure Container Registry (ACR)
    - name: Connect to Azure Container Registry
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container Registry (ACR)
    - name: Container build and push to a Azure Container Registry
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
      working-directory: ./app
    
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - name: Set the target Azure Kubernetes Service (AKS) cluster    
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - name: Create namespace
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
    - name: Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
  
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Deploy app to AKS
    - name: Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          ${{ github.workspace }}/manifests/deploy03.yml
          ${{ github.workspace }}/manifests/service-2.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
